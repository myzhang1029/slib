#!/bin/sh
# configure written by Zhang Maiyun
# GEN:config.mk
# Licence:LGPL

prefix='/usr/local'
cc=""
ar="ar"
rm="rm"
build="err"
cflags='-Wno-variadic-macros -W -Wall -pedantic -c -O2 -I../include'

help_me()
{
	printf 'Usage: configure [option=<vaule> | --help]\n\n'
	printf 'Options:\n'
	printf '\t--prefix=prefix:\tSet prefix;\n\n'
	printf '\t--cc=complier:\tSet complier.(Must support -Dmacro=vaule, -c, -Iinclude, -llibrary, -W, -On, -pedantic) e.g. To cross complie;\n\n'
	printf '\t--ar=ar:\tSet libmaker.(Should support "rcs" option);\n\n'
	printf '\t--rm=rm:\tSet remover(Should support "-f" option);\n\n'
	printf '\t--extra-cflags=more-cflags:\tadd more cflags to "CFLAGS";\n\n'
	printf '\t--target=target:\tSet target(win|unix), not like "i686-linux-gnu";\n\n'
	printf '\t--help,-h:\tDisplay this help information.\n\n'
	printf '\nProject maintained by Zhang Maiyun <myzhang1029@163.com>.\n'
	exit 0
}

for opt do
  eval opt=\"$opt\"
  case "$opt" in
  --prefix=*) prefix=`echo $opt | cut -d '=' -f 2`
  ;;
  --cc=*) cc=`echo $opt | cut -d '=' -f 2`
  ;;
  --ar=*) ar=`echo $opt | cut -d '=' -f 2`
  ;;
  --rm=*) rm=`echo $opt | cut -d '=' -f 2`
  ;;
  --extra-cflags=*) cflags="$cflags `echo $opt | cut -d '=' -f 2`"
  ;;
  --help|-h) help_me
  ;;
  --target=*) build=`echo $opt | cut -d '=' -f 2`
  if [ "$build" != "unix" ] && [ "$build" != "win" ] ; then
    printf '\033[1mconfigure:\033[31mError:\033[30munknown system type "%s", type "./configure --help" for more infomation\033[0m\n' $build
    exit 1
  fi
  ;;
  *) printf '\033[1mconfigure:\033[33mWarning:\033[30munrecognized option %s\033[0m\n' "$opt"
  ;;
  esac
done

printf "Checking for C Compiler... "
if [ "$cc" = "" ] ; then
  if clang -v > /dev/null 2>&1; then
    cc="clang"
  elif gcc -v > /dev/null 2>&1; then
    cc="gcc"
    cflags="-Wno-misleading-indentation $cflags"
  elif tcc -v > /dev/null 2>&1; then
    cc="tcc"
  elif cc -v > /dev/null 2>&1; then
   cc="cc"
  else
    echo no
    printf '\033[1mconfigure:\033[31mError:\033[30mNo C compiler found!\n\tPlease specify. Read "./configure --help" for more infomation\033[0m\n'
    exit 1
  fi
elif [ "$cc" = "gcc" ] ; then
  cflags="-Wno-misleading-indentation $cflags"
fi
echo $cc
 
printf "Checking build system type... "
if [ "$build" = "err" ] ; then 
  case `uname` in
    Linux|*BSD|Darwin) build=unix
    ;;
    MINGW*|MSYS*|CYGWIN*) build=win
    ;;
    *) echo unknown
      printf '\033[1mconfigure:\033[31mError:\033[30munable to determine system type, please add option --target=win or unix\033[0m\n'
      exit 1
  esac
  
fi
echo $build
echo Generating config.mk
echo '#config.mk generated by configure'>config.mk
echo CC=`echo $cc`>>config.mk
echo AR=`echo $ar`>>config.mk
echo RM=`echo $rm`>>config.mk
echo CFLAGS-win=`echo $cflags` -DPLAT=1>>config.mk
echo CFLAGS-unix=`echo $cflags` -DPLAT=0>>config.mk
echo BUILD=`echo $build`>>config.mk
echo PREFIX=`echo $prefix`>>config.mk
printf 'configure:\033[32mfinished\033[30m\n'

