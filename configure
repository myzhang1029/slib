#!/bin/sh
#
#  Guess values for system-dependent variables and create Makefiles.
#
#  Copyright (C) 2017, 2018 Zhang Maiyun
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#  This file is part of the slib.
#  The slib  is free software; you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

srcdir=`dirname $0`
. $srcdir/cmake/acconf.sh

# Plus which, cc, ar and sh, these are minimal requirement to build this project
check_progs cat rm mkdir cut sed expr find tr grep printf uname
check_progs make

# Default/init vaule of variables
cross=""
prefix="/usr/local"
bindir=""
libdir=""
includedir=""
mandir=""
infodir=""
cc="${CC}"
ar="${AR}"
rm="rm"
build=""
cflags="${CFLAGS} ${CPPFLAGS} -Wall -Wextra -pedantic -O2 -I${srcdir}/include"
ldflags="${LDFLAGS} -lm"
soflags=""
cfiles="`cd ${srcdir};find src -name '*.c' -type f | tr '\n' ' '`"
hfiles="`find ${srcdir}/include -name '*.h' -type f | tr '\n' ' '`"
exesuf=""
sosuf=""
# Get constants defined in CMakeLists.txt
name="libsbl"
version="`grep project ${srcdir}/CMakeLists.txt|cut -d\  -f3`"
description="`grep DESCRIPTION ${srcdir}/CMakeLists.txt|cut -d\\" -f2`"

# Help
help_me(){
	printf 'Usage: %s/configure [option=<vaule> | --help]\n' ${srcdir}
	printf 'Options:\n'
	printf '  --prefix=PREFIX\tSet prefix;\n'
	printf '  --build=BUILD\tconfigure for building on BUILD [guessed]'
	printf '  --host=HOST\tcross-compile to build programs to run on HOST [BUILD]'
	printf '  --target=TARGET\tIgnored'
    printf '  --rm=RM\tSet remover(Should support "-f" option);\n'
	printf '  --sosuffix=EXT_WITH_A_DOT\tSet extension of shared objects;\n'
	printf '  --exesuffix=EXT_WITH_A_DOT\tSet extension of executables;\n'
	printf '  --soflags=SOFLAGS\tSet CFLAGS for shared objects\n'
	printf '  --{bin,lib,include,man,info}dir=DIR\t Set bindir, libdir, includedir, mandir, infodir;\n'
	printf '  --help,-h\tDisplay this help information.\n\n'
    printf 'Some influential environment variables:'
    printf '  AR\tlibmaker'
    printf '  CC\tC compiler'
    printf '  CFLAGS\tC flags'
	printf '\nProject maintained by Zhang Maiyun <myzhang1029@163.com>.\n'
	exit 0
}

# Parse arguments
for opt do
    eval opt=\"${opt}\"
    case "${opt}" in
        --prefix=*) prefix=`echo ${opt} | cut -d '=' -f 2`
            ;;
        --host=*) cross=`echo ${opt} | cut -d '=' -f 2`
            ;;
        --build=*|--target=*)
            ;;
        --rm=*) rm=`echo ${opt} | cut -d '=' -f 2`
            ;;
        --sosuffix=*) sosuf=`echo ${opt} | cut -d '=' -f 2`
            ;;
        --exesuffix=*) exesuf=`echo ${opt} | cut -d '=' -f 2`
            ;;
        --bindir=*) bindir=`echo ${opt} | cut -d '=' -f 2`
            ;;
        --libdir=*) libdir=`echo ${opt} | cut -d '=' -f 2`
            ;;
        --includedir=*) includedir=`echo ${opt} | cut -d '=' -f 2`
            ;;
        --mandir=*) mandir=`echo ${opt} | cut -d '=' -f 2`
            ;;
        --infodir=*) infodir=`echo ${opt} | cut -d '=' -f 2`
            ;;
        --soflags=*) soflags="${soflags} `echo ${opt} | cut -d '=' -f 2`"
            ;;
        --help|-h) help_me
            ;;
        *) echo configure: Warning: unrecognized option ${opt}
            ;;
    esac
done

# system name for the host platform
if [ "$cross" = "" ];
then
    system_name=`$srcdir/cmake/config.guess`
else
    system_name=`$srcdir/cmake/config.sub $cross`
fi
echo Starting configuration for host $system_name
system_name=`extract_os $system_name`

# Check for C compiler
if [ "$cc" = "" ];
then
    check_cc $cross
fi

# For exesuf
check_cc_works

# Check for ar
if [ "$ar" = "" ] ; then
    check_ar $cross
fi

# For sosuf
check_shared_works

if check_header "alloca.h";
then
    alloca_h=1
else
    alloca_h=0
fi

if check_header "fcntl.h";
then
    fcntl_h=1
else
    fcntl_h=0
fi

if check_header "termios.h";
then
    termios_h=1
else
    termios_h=0
fi

if check_header "unistd.h";
then
    unistd_h=1
else
    unistd_h=0
fi

if [ "$libdir" = "" ] ; then
	libdir="$prefix/lib"
fi
if [ "$bindir" = "" ] ; then
	bindir="$prefix/bin"
fi
if [ "$includedir" = "" ] ; then
	includedir="$prefix/include"
fi

# Write output
mkdir -p src
echo Generating Makefile
cat > Makefile << ACEOF
# Makefile generated by configure
OBJECTS=`echo ${cfiles} | sed s/\\\.c/.c.o/g`

# Always write an all target
all:libsbl${sosuf} sbltool${exesuf}

libsbl${sosuf}: ${hfiles} \$(OBJECTS)
	${cc} ${soflags} \$(OBJECTS) -o \$@ ${ldflags}
	${ar} rcs ./libsbl.a \$(OBJECTS)

sbltool${exesuf}: libsbl${sosuf} ${srcdir}/sbltool.c
	${cc} ${cflags} -o \$@ ${srcdir}/sbltool.c -L. -lsbl ${ldflags}

install: all
	install -c -d -m 755 ${bindir} ${libdir} ${includedir} ${includedir}/slib
	install -c -p -m 644 ${srcdir}/include/slib.h ${includedir}
	install -c -p -m 644 ${srcdir}/include/slib/*.h ${includedir}/slib
	install -c -p -m 644 sbl.pc ${libdir}/pkgconfig
	install -c -p -m 644 libsbl.a ${libdir}
	install -c -p -m 755 libsbl${sosuf} ${libdir}
	install -c -p -m 755 sbltool${exesuf} ${bindir}

# The test, always ensure the built version is used
test: testdrv.exe
	./testdrv.exe

.PHONY: clean
clean:
	${rm} -rf libsbl.dylib libsbl.dll libsbl.so sbltool sbltool.exe testdrv.exe *.o */*.o *.a

distclean: clean
	-rmdir src testbin 2>/dev/null
	${rm} -f Makefile config.mk config.h sbl.pc testdrv.h

# Everything below is the same, you will not like to read it line by line
ACEOF
tmp=''
includes=''
entries='{'
for file in $srcdir/test/*-test.c;
do
    tmp="${tmp} ${file}"
    testname=`echo ${file} | sed s,.*/,, | cut -f1 -d-`
    entries="${entries}{\"${testname}\", ${testname}_main}, "
    includes="${includes}#include \"${testname}-test.c\"\n"
done
entries="${entries}{NULL, NULL}}"
echo "${includes}" > testdrv.h
sed "s/@TESTS@/${entries}/;s,@TFILES@,," ${srcdir}/test/testdrv.h.in >> testdrv.h
echo testdrv.exe: ${srcdir}/test/testdrv.c testdrv.h ${tmp} libsbl${sosuf} >> Makefile
echo "	${cc} ${cflags} -I${srcdir}/test -I. -o \$@ ${srcdir}/test/testdrv.c libsbl.a ${ldflags}" >> Makefile
for file in $cfiles;
do
    echo ${file}.o: ${srcdir}/${file} >> Makefile
    echo "	${cc} ${cflags} -c -o \$@ ${srcdir}/${file}" >> Makefile
done

echo Generating sbl.pc
sed "s,@CMAKE_INSTALL_PREFIX@,${prefix},;s,@CMAKE_INSTALL_LIBDIR@,lib,;\
    s,@CMAKE_INSTALL_INCLUDEDIR@,include,;s,@PROJECT_NAME@,${name},;\
    s,@PROJECT_DESCRIPTION@,${description},;\
    s,@PROJECT_VERSION@,${version},;" ${srcdir}/sbl.pc.in > sbl.pc

echo Generating config.h
