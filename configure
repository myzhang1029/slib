#!/bin/sh
# configure written by Zhang Maiyun
# GEN:config.mk
# Licence:LGPL

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi

# Default/init vaule of variables
prefix=''
libdir=''
includedir=''
mandir=''
infodir=''
cc=''
ar="ar"
rm="rm"
build="err"
cflags='-Wno-variadic-macros -W -Wall -pedantic -c -O2 -I../include'
soflags=""
files="`find . -name '*.[ch]'|grep -v hist|grep -v test`"
exesuf=""

# Function strstr
strstr(){
	expr match "$1" ".*$2" >/dev/null&&return 0
	return 1
}

# Help
help_me()
{
	printf 'Usage: configure [option=<vaule> | --help]\n'
	printf 'Options:\n'
	printf '  --prefix=PREFIX\tSet prefix;\n'
	printf '  --cc=CC\tSet complier.(Must support -Dmacro=vaule, -c, -Iinclude, -llibrary, -W, -On, -pedantic) e.g. To cross complie;\n'
	printf '  --ar=AR\tSet libmaker.(Should support "rcs" option);\n'
	printf '  --rm=RM\tSet remover(Should support "-f" option);\n'
	printf '  --extra-cflags=CFLAGS\tadd more cflags to "CFLAGS";\n'
	printf '  --exesuf=SUFFIX\tset suffix of shared objects;\n'
	printf '  --soflags=SOFLAGS\tSet CFLAGS when making shared objects\n'
	printf '  --{bin,lib,include,man,info}dir=DIR\t Set bindir, libdir, includedir, mandir, infodir;\n'
	printf '  --target=TARGET\tSet target(win|unix), not like "i686-linux-gnu";\n'
	printf '  --help,-h\tDisplay this help information.\n'
	printf '\nProject maintained by Zhang Maiyun <myzhang1029@163.com>.\n'
	exit 0
}

# Parse arguments
for opt do
  eval opt=\"$opt\"
  case "$opt" in
  --prefix=*) prefix=`echo $opt | cut -d '=' -f 2`
  ;;
  --cc=*) cc=`echo $opt | cut -d '=' -f 2`
  ;;
  --ar=*) ar=`echo $opt | cut -d '=' -f 2`
  ;;
  --rm=*) rm=`echo $opt | cut -d '=' -f 2`
  ;;
  --extra-cflags=*) cflags="$cflags `echo $opt | cut -d '=' -f 2`"
  ;;
  --exesuffix=*) exesuf=`echo $opt | cut -d '=' -f 2`
  ;;
  --bindir=*) bindir=`echo $opt | cut -d '=' -f 2`
  ;;
  --libdir=*) libdir=`echo $opt | cut -d '=' -f 2`
  ;;
  --includedir=*) includedir=`echo $opt | cut -d '=' -f 2`
  ;;
  --mandir=*) mandir=`echo $opt | cut -d '=' -f 2`
  ;;
  --infodir=*) infodir=`echo $opt | cut -d '=' -f 2`
  ;;
  --soflags=*) soflags=`echo $opt | cut -d '=' -f 2`
  ;;
  --help|-h) help_me
  ;;
  --target=*) build=`echo $opt | cut -d '=' -f 2`
  if [ "$build" != "unix" ] && [ "$build" != "win" ] ; then
    printf '\033[1mconfigure:\033[31mError:\033[0munknown system type "%s", type "./configure --help" for more infomation\n' $build
    exit 1
  fi
  ;;
  *) printf '\033[1mconfigure:\033[33mWarning:\033[0munrecognized option %s\n' "$opt"
  ;;
  esac
done

# Check for C compiler
printf "Checking for C Compiler... "
if [ "$cc" = "" ] ; then
  if clang -v > /dev/null 2>&1; then
    cc="clang"
  elif gcc -v > /dev/null 2>&1; then
    cc="gcc"
    cflags="-Wno-misleading-indentation $cflags"
  elif tcc -v > /dev/null 2>&1; then
    cc="tcc"
  elif cc -v > /dev/null 2>&1; then
   cc="cc"
  else
    echo no
    printf '\033[1mconfigure:\033[31mError:\033[30mNo C compiler found!\n\tPlease specify. Read "./configure --help" for more infomation\033[0m\n'
    exit 1
  fi
else 
  strstr "$cc" "gcc" && cflags="-Wno-misleading-indentation $cflags"
fi
echo $cc

# Check for system
printf "Checking build system type... "
if [ "$build" = "err" ] ; then 
  case `uname` in
    Linux|*BSD|Darwin) build="unix"
    ;;
    MINGW*|MSYS*|CYGWIN*) build="win"
    ;;
    *) echo unknown
      printf '\033[1mconfigure:\033[31mError:\033[0munable to determine system type, please add option --target=win or unix\n'
      exit 1
  esac
fi
echo $build

# For exesuf
printf "Checking suffix for shared objects... "

if [ "$exesuf" = "" ] ; then
  case `uname` in
    Linux|*BSD) exesuf=".so";
	    soflags="-fPIC -shared -Os"
    ;;
    Darwin) exesuf=".dylib";
	    # Software version is defined in slib.h
            currentversion="`head include/slib.h -n 31 | tail -n 1 | awk '{print $3}'`.`head include/slib.h -n 33 | tail -n 1 | awk '{print $3}'`.`head include/slib.h -n 34 | tail -n 1 | awk '{print $3}'`";
	    soflags="-dynamiclib -current_version $currentversion"
    ;;
    MINGW*|MSYS*|CYGWIN*) exesuf=".dll";soflags="-shared"
    ;;
    *) echo unknown
	    printf '\033[1mconfigure:\033[31mError:\033[0munable to determine suffix for shared objects(aka so/dll), please add option --exesuffix\n'
      exit 1
  esac
fi
echo $exesuf


if [ "$prefix" = "" ] ; then
	prefix='/usr/local'
fi
if [ "$libdir" = "" ] ; then
	libdir="$prefix/lib"
fi
if [ "$includedir" = "" ] ; then
	includedir="$prefix/include"
fi
if [ "$mandir" = "" ] ; then
	mandir="$prefix/share/man"
fi
if [ "$infodir" = "" ] ; then
	infodir="$prefix/share/info"
fi

# Write output
echo Generating config.mk
echo '#config.mk generated by configure'>config.mk
echo CC=`echo $cc`>>config.mk
echo AR=`echo $ar`>>config.mk
echo RM=`echo $rm`>>config.mk
echo CFLAGS-win=`echo $cflags` -DPLAT=1>>config.mk
echo CFLAGS-unix=`echo $cflags` -DPLAT=0>>config.mk
echo BUILD=`echo $build`>>config.mk
echo PREFIX=`echo $prefix`>>config.mk
echo FILES=`echo $files`>>config.mk
echo EXESUF=`echo $exesuf`>>config.mk
echo SOFLAGS=`echo $soflags`>>config.mk
echo LIBDIR=`echo $libdir`>>config.mk
echo INCLUDEDIR=`echo $includedir`>>config.mk

printf 'configure:\033[32mfinished\033[30m\n'

